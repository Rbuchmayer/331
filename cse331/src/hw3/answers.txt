CSE 331 Homework 3.  Answers to Written questions.
Edit this file to supply your answers.

Name:  Ryan Buchmayer

Problem 6.

(a) The testThrowsIllegalArgumentException test fails because the code 
throws an IllegalArgumentException for an input it shouldn't. An 
IllegalArgumentException exception should only be thrown when given 
a negative input. The code threw an IllegalArgumentException for the 
input 0 (a non-negative), so the test did not pass. To fix this, I 
changed the condition that throws the exception from "n <= 0" to
"n < 0", so it only throws exceptions for negative inputs.

(b) The testBaseCase test fails because when given the base case input
0, the code does not return the correct value (1), instead it throws
an IllegalArgumentException that says "0 is negative". Again, this is
because when given 0, the code enters the wrong branch. My fix in
part (a) also fixed this issue because it allows the input 0 to avoid
the branch for negative numbers. 

(c) The testInductiveCase test fails when given the input 2. It 
returns 1 when it should return 2. This is because the base case 
conditional accepts 0, 1, and 2 as base cases, when only 0 and 1 are
the base cases. To fix this I changed the base case conditional from 
"n <= 2" to "n <= 1".

	This allows the input 2 to avoid the base case branch, but the test
still fails. This time, the code returned 0 when it should return 2. 
That made me realize that the return statement subtracts the two 
recursive calls instead of adding them. So to fix this, I changed 
the "-" to a "+" between the two recursive calls in the return 
statement.


Problem 7. 

(a) The Ball object fails the test because it always returns 0 for the 
volume. To fix this I changed the body of getVolume to 
"return this.volume". In addition, when creating a Ball, the volume 
field of "this" is never set to the volume parameter. To fix this, 
I changed the constructor body to be "this.volume = volume".

(b) I think it is better to implement getVolume by keeping track of the
total volume as Balls are added and removed for two reasons. First,
we will avoid calculating the total volume every call, and always
have the total volume ready. Second, if the BallContainer is very large,
calculating the total volume could be very expensive, so we want
to minimize the number of times we compute the total volume. 

(c) One implementation of getBallsFromSmallest() is doing all the work
in the getBallsFromSmallest() method. To do this, create an inner class 
defining a comparator for Balls based on volume. Then moved the Balls 
in the Box from the Box to a sort-able structure like an ArrayList. 
Finally, call Collections.sort() on that structure, passing in a new
comparator object defined in the inner class and return the product
as an iterator. A second approach could be to define a new field in the 
Box class that is a sort-able structure, like a SortedSet, of type Ball.
You would also need to define a comparator class to compare Balls by volume. 
The data structure would be updated and sorted every time a Ball is added or 
removed, using the comparator. This way, the implementor will always have a 
sorted Ball structure to use.

I think the first implementation is better. The second implementation keeps 
track of two data structures that hold the same elements, which is unnecessary.
The first implementation also allows for more code reuse, as BallContainer 
already has a Set that holds all the elements. 

